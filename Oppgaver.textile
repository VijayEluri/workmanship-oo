h1. Oppgaver for workshop

Dette er oppgaver knyttet til eksempelkoden som er utlevert.
Ikke nøl med å spørre og be om forklaring eller hjelp :)


h2. Uheldig synlighet

Implementasjonen av Account (både i interface og implementasjonsklasser) eksponerer uheldig mye av
sin interne tilstand og representasjon. 
# Eksponering av intern tilstand gjennom settere
#* Fjerne setAmount fra Account-interface og klasser


h2. Spredt domenelogikk

Uheldige representasjoner og dårlig skult implementasjon fører ofte til spredt domenelogikk.
Dette har skjedd i vår kodebase, pengehåndtering er spredt mellom flere tjenester og mye er duplisert.
Vi ønsker at operasjoner som omhandler en konto i seg selv skal plasseres i kontoklassen.
#* Legge til withdrawal og deposit i Account-klassene
#* Flytte logikk som håndterer overtrekk av konto fra service til Account-klasse


h2. Primitive obsession

Koden er full av tekststrenger og tall som kastes rundt. Både kontonummer og personnummer er konsepter
som _fortjener_ fullverdig behandling som egne konsepter.
Refactorer til å bruke immutable objekter for disse, og sørg for at AccountUtil blir overflødig ved å plassere
denne logikken i hver implementasjonsklasse.


h2. Verdi-objekter

Customer har adresse-informasjon. Dette er informasjon som kan tenkes å gjenbrukes i andre kontekster,
og en adresse er i tillegg meningsfylt å representere som en enkelt enhet i seg selv.
Refactorer Customer til å bruke en immutable Address-implementasjon for å representere bosted.


h2. Interface vs Arv

Interfacet Account startet som en god ide om at man skal tilby et interface med flere implementasjoner.
Her er mye av oppførselen lik for flere kontotyper, men er duplisert i flere klasser.
La oss innføre en superklasse for kontoer som inneholder felles logikk og lar spesialiseringer håndtere
sine spesielle behov og sin unike oppførsel.


h2. Single Responsibility Principle

# Noe rundt 'S' i SOLID - Single responsibility
#* Ingen gode eksempler i koden nå. Men et typisk problem slik jeg ser det.


h2. Tall og sånt

En klassisk problemstilling i datasystemer er håndtering av tall som har en semantikk utover tallverdien
knyttet til seg. Kroneksempelet er penger. Her gjelder andre avrundingsregler, egenskaper og avgrensinger
enn det som gjelder for normale desimaltall. Likefult er verden full av systemer som implementerer penger
som *double*.
Refactorer ut håndtering av penger i en egen Money-klasse. Husk å skrive tester først.


